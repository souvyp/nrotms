function readImgFile(input,h){ 
	var file = input.files[0]; 
	//这里我们判断下类型如果不是图片就返回 去掉就可以上传任意文件 
	if(!/image\/\w+/.test(file.type)){ 
		alert("请确保文件为图像类型"); 
		return false; 
	} 
	var reader = new FileReader(); 
	reader.readAsDataURL(file); 
	reader.onload = function(e){ 
		if(!this.result||this.result=="")
			alert("图像转换为图标错误，请重新选择图像!");
		else
			h(this.result); 
	} 
} 

function convertImgToBase64(url, callback, outputFormat){
    var canvas = document.createElement('CANVAS'),
        ctx = canvas.getContext('2d'),
        img = new Image;
	img.crossOrigin = 'Anonymous';
	img.onload = function(){
		canvas.height = img.height;
		canvas.width = img.width;
		ctx.drawImage(img,0,0);
		var dataURL = canvas.toDataURL(outputFormat || 'image/png');
		callback.call(this, dataURL);
		canvas = null; 
	};
	img.src = url;
}

function simulateClick(el) {
  var evt;
  if (document.createEvent) { // DOM Level 2 standard
    evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window,
      0, 0, 0, 0, 0, false, false, false, false, 0, null);

    el.dispatchEvent(evt);
  } else if (el.fireEvent) { // IE
    el.fireEvent('onclick');
  }
}

function invokeClick(element) {
	if(element.click)
		element.click(); //判断是否支持click() 事件
	else if(element.fireEvent)
		element.fireEvent('onclick'); //触发click() 事件
	else if(document.createEvent){
		var evt = document.createEvent("MouseEvents"); //创建click() 事件
		evt.initEvent("click", true, true); //初始化click() 事件
		element.dispatchEvent(evt); //分发click() 事件
	}

}

window.onload = function() {
	MM.App.init();
	//MM.App.io.restore();
	
	$('.nodeicon .Fileinput').on('change',function(){
		var that=this;
		readImgFile(that,function(data){
			$('#photo').val(data);
			invokeClick($('#photo')[0]);
			//$('.nodeicon img').attr('src',data);
		});
	})
	
	$('.nodeicon .clearButton').click(function(){
		//$('.nodeicon img').attr('src','data:image/png;base64,');
		$('#photo').val('');
		invokeClick($('#photo')[0]);
	})
	

	$('.ui button.res,#tagRes').click(function(){
		if($("#configLay").is(":visible")==false){ 
			$('#configLay').show();
			$('#resourceLay').hide();
		}
		else{
			$('#configLay').hide();
			$('#resourceLay').show();
		}
	})
}

function alert(m){
	$('#myAlert .modal-body p').text(m);
	$("#myAlert").modal('show');
}


function initDrag(obj){
	if(obj.length>0)
		obj.draggable({ 
		  appendTo: 'body',
		  helper: 'clone'
		});
}

function DropItem(item){

	if(item){
		var node=$(item._dom.node).find(".content");		
		if(!node.attr("droped")){

		node.attr("droped",true);
			node.droppable({
			  activeClass: 'active',
			  hoverClass: 'hover',
			  accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
			  drop: function (e, ui) {
				 var text=ui.draggable.text();
				 item.setDrops(text);
			  }
			});
		}
	}
}

function Wstate(inx){
	$("#status").get(0).selectedIndex = inx; 			
	var action = new MM.Action.SetStatus(MM.App.current, $("#status").val());
	MM.App.action(action);
}

function Wshow(inx){
	$("#layout").get(0).selectedIndex = inx;
	var layout = MM.Layout.getById($("#layout").val());
	var action = new MM.Action.SetLayout(MM.App.current, layout);
	MM.App.action(action);
}

function Wshape(inx){
	$("#shape").get(0).selectedIndex = inx;

	var shape = MM.Shape.getById($("#shape").val());

	var action = new MM.Action.SetShape(MM.App.current, shape);
	MM.App.action(action);
}

function SaveNotes(){
	var notes=$('#responsive [name="note"]');
	var _others={};
	for(var i=0;i<notes.length;i++){
		var v=notes.eq(i).val();
		if(v)
			_others[i]=v;
	}
	MM.App.current._others=_others;
	MM.App.current._id=$('#responsive [name="code"]').val();
	MM.App.current.setText($('#responsive [name="name"]').val());
}

function NodeProperty(){
	MM.Menu.close();

	var cont=MM.App.current._dom.text;

	$('#responsive .modal-title').html(cont.innerText+' <font color="#ddd">'+MM.App.current._id+'</font>');
	$('#responsive [name="code"]').val(MM.App.current._id);
	$('#responsive [name="name"]').val(cont.innerHTML);
	var notes=$('#responsive [name="note"]');
	for(var i=0;i<notes.length;i++){				
		var v=MM.App.current._others?MM.App.current._others[i]:null;
		if(v)
			notes.eq(i).val(v);
		else
			notes.eq(i).val('');
	}
}

function LinkMindMap(){
	var cont=MM.App.current._dom.text;
	var link=$('#linkModal [name="link"]').val();
	if(link==""){
		MM.App.current.setText(cont.innerText);
	}
	else if(link!==""){
		
		MM.App.current.setText('<a href="'+link+'">'+cont.innerText+'</a>');
	}
}

function Logout(){
	location.href=MISC_ACCOUNT+'?cmd=logout';
}

function EnterFrame(){
	if(appcode!=="")
		window.open('/kde/frame/?code='+appcode);
}

function EnterCodding(){
	if(appcode!=="")
		window.open('/kde/coder/?code='+appcode);
}

function EnterDatabase(){
	if(appcode!=="")
		window.open('/kde/dataM/?code='+appcode);
}

function EnterURL(url){
	if(appcode!=="")
		window.open(url);
}